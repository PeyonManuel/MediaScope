// src/store/features/auth/authSlice.ts (Example path)

import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import type { User, Session } from '@supabase/supabase-js';
import { RootState } from '../../../../store/store';

// Define the shape of the authentication state
export interface AuthState {
  session: Session | null; // Holds the full Supabase session object
  user: User | null; // Holds the Supabase user object
  isLoading: boolean; // Tracks loading state for auth operations (like login)
  error: string | null; // Stores any authentication error message
}

// Define the initial state
const initialState: AuthState = {
  session: null,
  user: null,
  isLoading: false, // Start not loading
  error: null,
};

// Create the authentication slice
const authSlice = createSlice({
  name: 'auth', // Name of the slice
  initialState,
  // Reducers define how the state can be updated
  reducers: {
    // Action to set the user session (typically called by onAuthStateChange or after login)
    setUserSession: (state, action: PayloadAction<Session | null>) => {
      const session = action.payload;
      state.session = session;
      state.user = session?.user ?? null; // Extract user from session, or set to null
      state.isLoading = false; // No longer loading
      state.error = null; // Clear any previous errors on successful session update
      console.log(
        'AUTH_SLICE: Session updated',
        session ? `User: ${session.user.id}` : 'No session'
      );
    },
    // Action to set the loading state (e.g., before calling signIn)
    setAuthLoading: (state, action: PayloadAction<boolean>) => {
      state.isLoading = action.payload;
      if (action.payload) {
        state.error = null; // Clear error when starting to load
      }
    },
    // Action to set an authentication error message
    setAuthError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
      state.isLoading = false; // Stop loading if error occurred
      // Optionally clear session/user on error, depending on desired behavior
      // state.session = null;
      // state.user = null;
      if (action.payload)
        console.error('AUTH_SLICE: Error set', action.payload);
    },
    // Action to clear authentication state (logout)
    clearAuth: (state) => {
      state.session = null;
      state.user = null;
      state.isLoading = false;
      state.error = null;
      console.log('AUTH_SLICE: Auth cleared (logout)');
    },
  },
});

// Export the action creators generated by createSlice
export const { setUserSession, setAuthLoading, setAuthError, clearAuth } =
  authSlice.actions;

// --- Selectors ---
// Selector to get the entire auth state (less common)
export const selectAuthState = (state: RootState): AuthState => state.auth;

// Selector to get the current user object
export const selectCurrentUser = (state: RootState): User | null =>
  state.auth.user;

// Selector to get the current session object
export const selectCurrentSession = (state: RootState): Session | null =>
  state.auth.session;

// Selector to check if the user is currently logged in
export const selectIsLoggedIn = (state: RootState): boolean =>
  !!state.auth.user;

// Selector to get the authentication loading state
export const selectAuthLoading = (state: RootState): boolean =>
  state.auth.isLoading;

// Selector to get the authentication error message
export const selectAuthError = (state: RootState): string | null =>
  state.auth.error;
// --- End Selectors ---

// Export the reducer function generated by createSlice
export default authSlice.reducer;
